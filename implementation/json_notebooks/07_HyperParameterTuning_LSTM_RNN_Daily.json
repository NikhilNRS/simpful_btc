{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "77575d7d-00f2-491e-89b1-7d370eb60c11",
      "metadata": {},
      "source": [
        "# Hyper Parameter Tuning using RandomizedSearchCV"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "3d3687e8-5528-4465-8be9-d63dfa542afd",
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/Users/nikhilrazab-sekh/Desktop/simpful_btc/implementation/.venv/lib/python3.9/site-packages/sklearn/impute/_base.py:577: UserWarning: Skipping features without any observed values: ['date' 'classification']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n",
            "/Users/nikhilrazab-sekh/Desktop/simpful_btc/implementation/.venv/lib/python3.9/site-packages/sklearn/impute/_base.py:577: UserWarning: Skipping features without any observed values: ['date' 'classification']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from math import sqrt\n",
        "import pickle\n",
        "\n",
        "# Paths to the prepped data files\n",
        "base_path = './daily_data/'  # Adjusted base path to where our files are now\n",
        "X_train_path = base_path + 'X_train.csv'\n",
        "X_test_path = base_path + 'X_test.csv'\n",
        "y_train_path = base_path + 'y_train.csv'\n",
        "y_test_path = base_path + 'y_test.csv'\n",
        "\n",
        "# Loading the datasets\n",
        "X_train = pd.read_csv(X_train_path)\n",
        "X_test = pd.read_csv(X_test_path)\n",
        "y_train = pd.read_csv(y_train_path)\n",
        "y_test = pd.read_csv(y_test_path)\n",
        "\n",
        "# Convert columns to numeric, coercing errors to NaN\n",
        "X_train = X_train.apply(pd.to_numeric, errors='coerce')\n",
        "X_test = X_test.apply(pd.to_numeric, errors='coerce')\n",
        "\n",
        "# Impute missing values\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X_train = imputer.fit_transform(X_train)\n",
        "X_test = imputer.transform(X_test)\n",
        "\n",
        "# Initialize the scaler for the features\n",
        "scaler_X = MinMaxScaler()\n",
        "\n",
        "# Scale 'X' features\n",
        "X_train_scaled = scaler_X.fit_transform(X_train)\n",
        "X_test_scaled = scaler_X.transform(X_test)\n",
        "\n",
        "# Initialize a separate scaler for the target variable\n",
        "scaler_y = MinMaxScaler()\n",
        "\n",
        "# Scale 'y' (the target variable)\n",
        "y_train_scaled = scaler_y.fit_transform(y_train.values.reshape(-1, 1)).flatten()\n",
        "y_test_scaled = scaler_y.transform(y_test.values.reshape(-1, 1)).flatten()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "bc37ad69-1e1f-48fe-8124-1bb065c67f11",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "DataFrame loaded from CSV:\n",
            "             Model          RMSE\n",
            "0        SimpleRNN  18514.550185\n",
            "1             LSTM  10000.142824\n",
            "2              GRU   6983.005377\n",
            "3  Sequential LSTM   2252.736655\n",
            "4  Timeseries LSTM  12636.922989\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Define the path to the CSV file\n",
        "csv_path = 'tables/notebook06/results.csv'\n",
        "\n",
        "# Read the DataFrame from the CSV file\n",
        "results_df = pd.read_csv(csv_path)\n",
        "\n",
        "print(\"DataFrame loaded from CSV:\")\n",
        "print(results_df)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3d74919d-ca0b-424f-861a-63059f9ecf73",
      "metadata": {},
      "source": [
        "## Function to Save Models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "0d67fc85-14f1-423d-bc8d-c4e12d1c0d9c",
      "metadata": {},
      "outputs": [],
      "source": [
        "import os\n",
        "import pickle\n",
        "from datetime import datetime\n",
        "\n",
        "def save_model_and_scalers(model, scaler_X, scaler_y, model_type):\n",
        "    \"\"\"\n",
        "    Save the Keras model and scalers with a timestamp and type in a directory using pickle.\n",
        "\n",
        "    Parameters:\n",
        "    - model: The trained Keras model to be saved.\n",
        "    - scaler_X: The MinMaxScaler object for the features.\n",
        "    - scaler_y: The MinMaxScaler object for the target variable.\n",
        "    - model_type: A string representing the type of the model (e.g., \"RNN\", \"LSTM\").\n",
        "    \"\"\"\n",
        "    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
        "    save_dir = f\"saved_models/{model_type}\"  # Create a directory with the model name\n",
        "    os.makedirs(save_dir, exist_ok=True)\n",
        "\n",
        "    # Save the model\n",
        "    model_filename = f\"{save_dir}/{model_type}_model_{timestamp}.h5\"\n",
        "    model.save(model_filename)\n",
        "\n",
        "    # Save the scalers\n",
        "    scalers_filename = f\"{save_dir}/{model_type}_scalers_{timestamp}.pkl\"\n",
        "    with open(scalers_filename, 'wb') as f:\n",
        "        pickle.dump({'scaler_X': scaler_X, 'scaler_y': scaler_y}, f)\n",
        "\n",
        "    print(f\"Model saved to {model_filename}\")\n",
        "    print(f\"Scalers saved to {scalers_filename}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7881ee7e-41ef-4b99-b2b0-fb1f0f4c32be",
      "metadata": {},
      "source": [
        "## Imports"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3696f698-79ae-4842-ae26-acb928d93a74",
      "metadata": {},
      "source": [
        "## Random Search"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "2be48824-1f75-4a05-b386-3f70d66a5185",
      "metadata": {
        "scrolled": true
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[I 2024-06-28 23:39:08,618] A new study created in memory with name: no-name-3254ae8f-1124-4e5e-8211-3a5c0fd5c16a\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "454e7660e91d402b8f7bed54356997a8",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "  0%|          | 0/10 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/Users/nikhilrazab-sekh/Desktop/simpful_btc/implementation/.venv/lib/python3.9/site-packages/keras/src/layers/rnn/rnn.py:205: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n",
            "/Users/nikhilrazab-sekh/Desktop/simpful_btc/implementation/.venv/lib/python3.9/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
            "  self._warn_if_super_not_called()\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[I 2024-06-28 23:39:28,255] Trial 0 finished with value: 0.043712325394153595 and parameters: {'units': 100, 'activation': 'relu', 'learning_rate': 0.005511710290140542, 'batch_size': 64}. Best is trial 0 with value: 0.043712325394153595.\n",
            "[I 2024-06-28 23:39:58,847] Trial 1 finished with value: 0.004067639820277691 and parameters: {'units': 150, 'activation': 'tanh', 'learning_rate': 0.0023641275482654037, 'batch_size': 64}. Best is trial 1 with value: 0.004067639820277691.\n",
            "[I 2024-06-28 23:40:09,132] Trial 2 finished with value: 0.01457346323877573 and parameters: {'units': 50, 'activation': 'relu', 'learning_rate': 0.0006961958350452251, 'batch_size': 64}. Best is trial 1 with value: 0.004067639820277691.\n",
            "[I 2024-06-28 23:40:25,133] Trial 3 finished with value: 0.0054469662718474865 and parameters: {'units': 100, 'activation': 'relu', 'learning_rate': 0.0008778590334596097, 'batch_size': 128}. Best is trial 1 with value: 0.004067639820277691.\n",
            "[I 2024-06-28 23:40:37,614] Trial 4 finished with value: 0.053952932357788086 and parameters: {'units': 50, 'activation': 'relu', 'learning_rate': 0.00031154675603802255, 'batch_size': 32}. Best is trial 1 with value: 0.004067639820277691.\n",
            "[W 2024-06-28 23:40:48,512] Trial 5 failed with parameters: {'units': 50, 'activation': 'relu', 'learning_rate': 0.006257221872045581, 'batch_size': 128} because of the following error: The value nan is not acceptable.\n",
            "[W 2024-06-28 23:40:48,512] Trial 5 failed with value nan.\n",
            "[I 2024-06-28 23:40:58,856] Trial 6 finished with value: 0.03520486503839493 and parameters: {'units': 50, 'activation': 'tanh', 'learning_rate': 0.000229446630285428, 'batch_size': 64}. Best is trial 1 with value: 0.004067639820277691.\n",
            "[I 2024-06-28 23:41:11,336] Trial 7 finished with value: 0.05962451919913292 and parameters: {'units': 50, 'activation': 'relu', 'learning_rate': 0.009194071991789749, 'batch_size': 32}. Best is trial 1 with value: 0.004067639820277691.\n",
            "[I 2024-06-28 23:41:23,779] Trial 8 finished with value: 0.10859912633895874 and parameters: {'units': 50, 'activation': 'relu', 'learning_rate': 0.0007348711851054376, 'batch_size': 32}. Best is trial 1 with value: 0.004067639820277691.\n",
            "[W 2024-06-28 23:41:53,688] Trial 9 failed with parameters: {'units': 150, 'activation': 'relu', 'learning_rate': 0.00483396231479828, 'batch_size': 64} because of the following error: The value nan is not acceptable.\n",
            "[W 2024-06-28 23:41:53,689] Trial 9 failed with value nan.\n",
            "Best parameters: {'units': 150, 'activation': 'tanh', 'learning_rate': 0.0023641275482654037, 'batch_size': 64}\n",
            "Epoch 1/10\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 80ms/step - loss: 0.2182\n",
            "Epoch 2/10\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 78ms/step - loss: 0.0212\n",
            "Epoch 3/10\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 77ms/step - loss: 0.0123\n",
            "Epoch 4/10\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 79ms/step - loss: 0.0045\n",
            "Epoch 5/10\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 80ms/step - loss: 0.0069\n",
            "Epoch 6/10\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 80ms/step - loss: 0.0102\n",
            "Epoch 7/10\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 78ms/step - loss: 0.0029\n",
            "Epoch 8/10\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 80ms/step - loss: 0.0067\n",
            "Epoch 9/10\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 79ms/step - loss: 0.0058\n",
            "Epoch 10/10\n",
            "\u001b[1m35/35\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 78ms/step - loss: 0.0020\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model saved to saved_models/LSTM_Optimized/LSTM_Optimized_model_20240628_234221.h5\n",
            "Scalers saved to saved_models/LSTM_Optimized/LSTM_Optimized_scalers_20240628_234221.pkl\n",
            "\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 37ms/step\n",
            "RMSE: 8690.430055340796\n",
            "MAPE: 38.83493437681215%\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import math\n",
        "import optuna\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM, Dense\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import pandas as pd\n",
        "import os\n",
        "\n",
        "# Assuming the following variables are defined and properly prepared:\n",
        "# X_train_scaled, y_train_scaled, X_test_scaled, y_test_scaled, scaler_y\n",
        "\n",
        "n_input = 168  # Number of time steps to look back for predictions\n",
        "n_features = X_train_scaled.shape[1]  # Number of features in the dataset\n",
        "\n",
        "def objective(trial):\n",
        "    # Hyperparameters to be tuned\n",
        "    units = trial.suggest_categorical('units', [50, 100, 150])\n",
        "    activation = trial.suggest_categorical('activation', ['relu', 'tanh'])\n",
        "    learning_rate = trial.suggest_float('learning_rate', 1e-4, 1e-2, log=True)\n",
        "    batch_size = trial.suggest_categorical('batch_size', [32, 64, 128])\n",
        "    \n",
        "    # Model definition\n",
        "    model = Sequential([\n",
        "        LSTM(units=units, activation=activation, input_shape=(n_input, n_features)),\n",
        "        Dense(1)\n",
        "    ])\n",
        "    model.compile(optimizer=Adam(learning_rate=learning_rate), loss='mse')\n",
        "    \n",
        "    # Fit model using TimeseriesGenerator\n",
        "    train_generator = TimeseriesGenerator(X_train_scaled, y_train_scaled, length=n_input, batch_size=batch_size)\n",
        "    validation_generator = TimeseriesGenerator(X_test_scaled, y_test_scaled, length=n_input, batch_size=batch_size)\n",
        "    model.fit(train_generator, epochs=10, validation_data=validation_generator, verbose=0)\n",
        "    \n",
        "    # Evaluate the model\n",
        "    val_loss = model.evaluate(validation_generator, verbose=0)\n",
        "    return val_loss\n",
        "\n",
        "# Optimize\n",
        "study = optuna.create_study(direction='minimize')\n",
        "study.optimize(objective, n_trials=10, show_progress_bar=True)\n",
        "\n",
        "# After optimization, print best parameters\n",
        "best_params = study.best_trial.params\n",
        "print(f\"Best parameters: {best_params}\")\n",
        "\n",
        "# Correct approach to use the best parameters to create a new model\n",
        "model = Sequential([\n",
        "    LSTM(units=best_params['units'], activation=best_params['activation'], input_shape=(n_input, n_features)),\n",
        "    Dense(1)\n",
        "])\n",
        "model.compile(optimizer=Adam(learning_rate=best_params['learning_rate']), loss='mse')\n",
        "\n",
        "# It's suggested to retrain our model here with the entire dataset or a combined train-validation set if applicable\n",
        "# Adjust batch_size based on best_params if it was part of the optimization\n",
        "train_generator = TimeseriesGenerator(X_train_scaled, y_train_scaled, length=n_input, batch_size=best_params['batch_size'])\n",
        "model.fit(train_generator, epochs=10, verbose=1)  # Or more epochs as needed\n",
        "\n",
        "# Save the model and scalers after retraining\n",
        "save_model_and_scalers(model, scaler_X, scaler_y, \"LSTM_Optimized\")\n",
        "\n",
        "validation_generator = TimeseriesGenerator(X_test_scaled, y_test_scaled, length=n_input, batch_size=best_params['batch_size'])\n",
        "y_pred_scaled = model.predict(validation_generator)\n",
        "y_pred = scaler_y.inverse_transform(y_pred_scaled)\n",
        "\n",
        "# Now that y_pred is defined, adjust the length of y_test_original accordingly\n",
        "y_test_original = y_test.values.flatten()[:len(y_pred)]\n",
        "\n",
        "# Calculate RMSE and MAPE\n",
        "rmse = math.sqrt(mean_squared_error(y_test_original, y_pred))\n",
        "mape = np.mean(np.abs((y_test_original - y_pred) / y_test_original)) * 100\n",
        "\n",
        "print(f\"RMSE: {rmse}\")\n",
        "print(f\"MAPE: {mape}%\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "9044dbab-e0e4-4aae-b733-a00862add2dd",
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "# Add the results to the DataFrame\n",
        "results_df = pd.read_csv('tables/notebook06/results.csv')\n",
        "new_result = pd.DataFrame({'Model': ['LSTM_Optimized'], 'RMSE': [rmse], 'MAPE': [mape]})\n",
        "results_df = pd.concat([results_df, new_result], ignore_index=True)\n",
        "\n",
        "# Create the directory if it doesn't exist\n",
        "output_dir = 'tables/notebook07'\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "\n",
        "# Save the updated DataFrame\n",
        "results_df.to_csv(os.path.join(output_dir, 'results.csv'), index=False)\n",
        "results_df.to_latex(os.path.join(output_dir, 'results.tex'), index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "b42524cd-aa79-4092-b7e8-35c6e3bc57ea",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Available columns in X_test after adding datetime: Index(['date', 'open', 'volume', 'sma_30', 'rsi', 'macd', 'dia_close',\n",
            "       'dia_volume', 'gld_close', 'gld_volume', 'spy_close', 'spy_volume',\n",
            "       'federal_funds_rate_daily', 'treasury_yield_daily', 'cpi_monthly',\n",
            "       'durables_monthly', 'nonfarm_payroll_monthly',\n",
            "       'real_gdp_per_capita_quarterly', 'real_gdp_quarterly',\n",
            "       'retail_sales_monthly', 'unemployment_monthly',\n",
            "       'central_bank_policy_rate_prcnt', 'domestic_credit_gdp',\n",
            "       'foreign_direct_investment_value', 'gdp_growth_annual_prcnt',\n",
            "       'inflation_rate_value',\n",
            "       'individuals_using_the_internet_prcnt_of_population',\n",
            "       'mobile_cellular_subscriptions_per_100_people',\n",
            "       'personal_remittances_received_prcnt_of_gdp',\n",
            "       'stock_market_index_value', 'tariffs_value',\n",
            "       'total_public_debt_gdp_value', 'trade_balance_value',\n",
            "       'trade_in_services_value', 'unemployment_rate_value', 'value',\n",
            "       'classification_numerical', 'classification', 'datetime'],\n",
            "      dtype='object')\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Paths to the prepped data files\n",
        "base_path = './daily_data/'  # Adjusted base path to where our files are now\n",
        "X_test_path = base_path + 'X_test.csv'\n",
        "\n",
        "# Re-read the X_test data from the file\n",
        "X_test = pd.read_csv(X_test_path)\n",
        "\n",
        "# Ensure the datetime column is present\n",
        "if 'datetime' not in X_test.columns:\n",
        "    X_test['datetime'] = pd.to_datetime(X_test.index)\n",
        "\n",
        "print(\"Available columns in X_test after adding datetime:\", X_test.columns)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "31ca4b47-f852-4896-b3e9-3310fca9e299",
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Plot saved to figures/notebook07/actual_vs_predicted07.png\n"
          ]
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "\n",
        "y_test_original = y_test.values.flatten()[:len(y_pred)]  # Adjust length if necessary\n",
        "# Assuming y_test_original and y_pred are correctly aligned with these dates\n",
        "test_dates_aligned = X_test['datetime'].values[-len(y_pred):]\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(test_dates_aligned, y_test_original, label='Actual', marker='.', linestyle='-', linewidth=1)\n",
        "plt.plot(test_dates_aligned, y_pred, label='Predicted', alpha=0.7, marker='.', linestyle='--', linewidth=1)\n",
        "plt.title('Actual vs Predicted')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Value')\n",
        "plt.legend()\n",
        "\n",
        "# Improve readability of the date labels\n",
        "plt.xticks(rotation=45)\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save the plot to the specified directory\n",
        "output_dir = 'figures/notebook07'\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "plot_path = os.path.join(output_dir, 'actual_vs_predicted07.png')\n",
        "plt.savefig(plot_path, bbox_inches='tight')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n",
        "\n",
        "print(f\"Plot saved to {plot_path}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1b1d6233-2073-44b2-be20-2a01449df07b",
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python (.venv)",
      "language": "python",
      "name": ".venv"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.6"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
