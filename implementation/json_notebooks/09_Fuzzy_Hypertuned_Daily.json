{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "55f3164d-3978-4a0d-b72a-37eef914d256",
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/Users/nikhilrazab-sekh/Desktop/simpful_btc/implementation/.venv/lib/python3.9/site-packages/urllib3/__init__.py:35: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import sys\n",
        "\n",
        "# Add the directory containing fs.py to the Python path\n",
        "sys.path.append('./modules')\n",
        "\n",
        "# Assuming FuzzySystemLayer and create_fuzzy_model are defined in fs.py\n",
        "from fs import FuzzySystemLayer, create_fuzzy_model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "de4dd104-82ec-4204-89bb-a6869b5b41d1",
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/Users/nikhilrazab-sekh/Desktop/simpful_btc/implementation/.venv/lib/python3.9/site-packages/sklearn/impute/_base.py:577: UserWarning: Skipping features without any observed values: ['date' 'classification']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n",
            "/Users/nikhilrazab-sekh/Desktop/simpful_btc/implementation/.venv/lib/python3.9/site-packages/sklearn/impute/_base.py:577: UserWarning: Skipping features without any observed values: ['date' 'classification']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from math import sqrt\n",
        "import pickle\n",
        "\n",
        "# Paths to the prepped data files\n",
        "base_path = './daily_data/'  # Adjusted base path to where our files are now\n",
        "X_train_path = base_path + 'X_train.csv'\n",
        "X_test_path = base_path + 'X_test.csv'\n",
        "y_train_path = base_path + 'y_train.csv'\n",
        "y_test_path = base_path + 'y_test.csv'\n",
        "\n",
        "# Loading the datasets\n",
        "X_train = pd.read_csv(X_train_path)\n",
        "X_test = pd.read_csv(X_test_path)\n",
        "y_train = pd.read_csv(y_train_path)\n",
        "y_test = pd.read_csv(y_test_path)\n",
        "\n",
        "# Convert columns to numeric, coercing errors to NaN\n",
        "X_train = X_train.apply(pd.to_numeric, errors='coerce')\n",
        "X_test = X_test.apply(pd.to_numeric, errors='coerce')\n",
        "\n",
        "# Impute missing values\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X_train = imputer.fit_transform(X_train)\n",
        "X_test = imputer.transform(X_test)\n",
        "\n",
        "# Initialize the scaler for the features\n",
        "scaler_X = MinMaxScaler()\n",
        "\n",
        "# Scale 'X' features\n",
        "X_train_scaled = scaler_X.fit_transform(X_train)\n",
        "X_test_scaled = scaler_X.transform(X_test)\n",
        "\n",
        "# Initialize a separate scaler for the target variable\n",
        "scaler_y = MinMaxScaler()\n",
        "\n",
        "# Scale 'y' (the target variable)\n",
        "y_train_scaled = scaler_y.fit_transform(y_train.values.reshape(-1, 1)).flatten()\n",
        "y_test_scaled = scaler_y.transform(y_test.values.reshape(-1, 1)).flatten()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4e03f325-5ce5-4993-9ee4-b9f45296bf98",
      "metadata": {},
      "source": [
        "## Function to Save Models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "acc935b8-6e0c-4f1f-a3d8-4dafcbbd0342",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "DataFrame loaded from CSV:\n",
            "             Model          RMSE       MAPE\n",
            "0        SimpleRNN  18514.550185        NaN\n",
            "1             LSTM  10000.142824        NaN\n",
            "2              GRU   6983.005377        NaN\n",
            "3  Sequential LSTM   2252.736655        NaN\n",
            "4  Timeseries LSTM  12636.922989        NaN\n",
            "5   LSTM_Optimized   8690.430055  38.834934\n",
            "6      Fuzzy_basic  15572.177503  49.570949\n",
            "7      Fuzzy_basic  15572.177503  49.570949\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Define the path to the CSV file\n",
        "csv_path = 'tables/notebook08/results.csv'\n",
        "\n",
        "# Read the DataFrame from the CSV file\n",
        "results_df = pd.read_csv(csv_path)\n",
        "\n",
        "print(\"DataFrame loaded from CSV:\")\n",
        "print(results_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "710ffe9f-e60e-4ba7-973f-018750004fe5",
      "metadata": {},
      "outputs": [],
      "source": [
        "import os\n",
        "import pickle\n",
        "from datetime import datetime\n",
        "\n",
        "def save_model_and_scalers(model, scaler_X, scaler_y, model_type):\n",
        "    \"\"\"\n",
        "    Save the Keras model and scalers with a timestamp and type in a directory using pickle.\n",
        "\n",
        "    Parameters:\n",
        "    - model: The trained Keras model to be saved.\n",
        "    - scaler_X: The MinMaxScaler object for the features.\n",
        "    - scaler_y: The MinMaxScaler object for the target variable.\n",
        "    - model_type: A string representing the type of the model (e.g., \"RNN\", \"LSTM\").\n",
        "    \"\"\"\n",
        "    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
        "    save_dir = f\"saved_models/{model_type}\"  # Create a directory with the model name\n",
        "    os.makedirs(save_dir, exist_ok=True)\n",
        "\n",
        "    # Save the model\n",
        "    model_filename = f\"{save_dir}/{model_type}_model_{timestamp}.h5\"\n",
        "    model.save(model_filename)\n",
        "\n",
        "    # Save the scalers\n",
        "    scalers_filename = f\"{save_dir}/{model_type}_scalers_{timestamp}.pkl\"\n",
        "    with open(scalers_filename, 'wb') as f:\n",
        "        pickle.dump({'scaler_X': scaler_X, 'scaler_y': scaler_y}, f)\n",
        "\n",
        "    print(f\"Model saved to {model_filename}\")\n",
        "    print(f\"Scalers saved to {scalers_filename}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7a2c0a6e-ccc4-491a-a2f4-1d1c3a118905",
      "metadata": {},
      "source": [
        "## Tuning Fuzzy model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "8282117f-68d5-4cf5-853d-1fc4bbe839ad",
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[I 2024-06-29 00:05:25,597] A new study created in memory with name: no-name-01057e26-226a-41e3-ada5-91af59c96eef\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "6fab5c975eac431b82a904b41145328e",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Optimize:   0%|          | 0/50 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[I 2024-06-29 00:05:26,929] Trial 0 finished with value: 0.16003626585006714 and parameters: {'learning_rate': 0.00015806874914812467, 'initializer_stddev': 0.08059618330333639}. Best is trial 0 with value: 0.16003626585006714.\n",
            "[I 2024-06-29 00:05:28,157] Trial 1 finished with value: 0.022626303136348724 and parameters: {'learning_rate': 0.0008627070815009714, 'initializer_stddev': 0.07450658226808347}. Best is trial 1 with value: 0.022626303136348724.\n",
            "[I 2024-06-29 00:05:29,226] Trial 2 finished with value: 0.022772395983338356 and parameters: {'learning_rate': 0.0013666962657073799, 'initializer_stddev': 0.07532080713018247}. Best is trial 1 with value: 0.022626303136348724.\n",
            "[I 2024-06-29 00:05:29,574] Trial 3 finished with value: 0.024274926632642746 and parameters: {'learning_rate': 0.008577737586628463, 'initializer_stddev': 0.07954149437554703}. Best is trial 1 with value: 0.022626303136348724.\n",
            "[I 2024-06-29 00:05:30,803] Trial 4 finished with value: 0.037218447774648666 and parameters: {'learning_rate': 0.00026074492726153945, 'initializer_stddev': 0.09128683896712078}. Best is trial 1 with value: 0.022626303136348724.\n",
            "[I 2024-06-29 00:05:32,021] Trial 5 finished with value: 0.03187140077352524 and parameters: {'learning_rate': 0.00046529800564098605, 'initializer_stddev': 0.030401735533901117}. Best is trial 1 with value: 0.022626303136348724.\n",
            "[I 2024-06-29 00:05:33,246] Trial 6 finished with value: 0.15890924632549286 and parameters: {'learning_rate': 0.00012179989834220435, 'initializer_stddev': 0.06794011770926096}. Best is trial 1 with value: 0.022626303136348724.\n",
            "[I 2024-06-29 00:05:34,463] Trial 7 finished with value: 0.34452635049819946 and parameters: {'learning_rate': 0.00017117008158208218, 'initializer_stddev': 0.09167248987041923}. Best is trial 1 with value: 0.022626303136348724.\n",
            "[I 2024-06-29 00:05:34,900] Trial 8 finished with value: 0.022355740889906883 and parameters: {'learning_rate': 0.007799544948914472, 'initializer_stddev': 0.019857718307352848}. Best is trial 8 with value: 0.022355740889906883.\n",
            "[I 2024-06-29 00:05:36,125] Trial 9 finished with value: 0.02426828257739544 and parameters: {'learning_rate': 0.0007166217158638154, 'initializer_stddev': 0.01857660268338162}. Best is trial 8 with value: 0.022355740889906883.\n",
            "[I 2024-06-29 00:05:36,586] Trial 10 finished with value: 0.023842524737119675 and parameters: {'learning_rate': 0.009774477519272642, 'initializer_stddev': 0.043300806999858964}. Best is trial 8 with value: 0.022355740889906883.\n",
            "[I 2024-06-29 00:05:37,280] Trial 11 finished with value: 0.023813406005501747 and parameters: {'learning_rate': 0.002890253737389934, 'initializer_stddev': 0.05539651978402034}. Best is trial 8 with value: 0.022355740889906883.\n",
            "[I 2024-06-29 00:05:37,973] Trial 12 finished with value: 0.024162719026207924 and parameters: {'learning_rate': 0.0022412070656270145, 'initializer_stddev': 0.01589633677732235}. Best is trial 8 with value: 0.022355740889906883.\n",
            "[I 2024-06-29 00:05:38,611] Trial 13 finished with value: 0.02203303575515747 and parameters: {'learning_rate': 0.003835138559392073, 'initializer_stddev': 0.05591584420771603}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:39,113] Trial 14 finished with value: 0.022517947480082512 and parameters: {'learning_rate': 0.004577199099552337, 'initializer_stddev': 0.04861119122919619}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:39,573] Trial 15 finished with value: 0.023545781150460243 and parameters: {'learning_rate': 0.005032931833051673, 'initializer_stddev': 0.0348971945456572}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:40,119] Trial 16 finished with value: 0.0222792886197567 and parameters: {'learning_rate': 0.005070780010315291, 'initializer_stddev': 0.05777591634462019}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:41,051] Trial 17 finished with value: 0.02507758140563965 and parameters: {'learning_rate': 0.0017112276145830887, 'initializer_stddev': 0.06005320863492468}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:41,574] Trial 18 finished with value: 0.023074014112353325 and parameters: {'learning_rate': 0.0038885827855971084, 'initializer_stddev': 0.06325731378766694}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:42,182] Trial 19 finished with value: 0.02387956902384758 and parameters: {'learning_rate': 0.0029607618405787166, 'initializer_stddev': 0.04500181147453585}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:42,684] Trial 20 finished with value: 0.02217743545770645 and parameters: {'learning_rate': 0.0059648884008070766, 'initializer_stddev': 0.035088001312036834}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:43,123] Trial 21 finished with value: 0.023751506581902504 and parameters: {'learning_rate': 0.005845949320826167, 'initializer_stddev': 0.03276339586453136}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:43,841] Trial 22 finished with value: 0.02206522226333618 and parameters: {'learning_rate': 0.003363341786718492, 'initializer_stddev': 0.05081062612396206}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:44,840] Trial 23 finished with value: 0.023002060130238533 and parameters: {'learning_rate': 0.0015553604488266156, 'initializer_stddev': 0.039869656858079104}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:45,555] Trial 24 finished with value: 0.022746490314602852 and parameters: {'learning_rate': 0.0029529303013688933, 'initializer_stddev': 0.04934481578367911}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:46,355] Trial 25 finished with value: 0.023528730496764183 and parameters: {'learning_rate': 0.002193296309746854, 'initializer_stddev': 0.026095347776738446}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:46,841] Trial 26 finished with value: 0.024139337241649628 and parameters: {'learning_rate': 0.006814759941287342, 'initializer_stddev': 0.051417439533739576}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:47,405] Trial 27 finished with value: 0.024480994790792465 and parameters: {'learning_rate': 0.00361999849504414, 'initializer_stddev': 0.040526084102426474}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:48,673] Trial 28 finished with value: 0.02495279721915722 and parameters: {'learning_rate': 0.0006089652085245905, 'initializer_stddev': 0.024689289283986032}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:49,901] Trial 29 finished with value: 0.023004399612545967 and parameters: {'learning_rate': 0.0012214519606547564, 'initializer_stddev': 0.06475852421761667}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:50,650] Trial 30 finished with value: 0.024943895637989044 and parameters: {'learning_rate': 0.002332111075419018, 'initializer_stddev': 0.037154796719901365}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:51,248] Trial 31 finished with value: 0.023007575422525406 and parameters: {'learning_rate': 0.005287943861282526, 'initializer_stddev': 0.057406637089422466}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:51,691] Trial 32 finished with value: 0.023576457053422928 and parameters: {'learning_rate': 0.006380694659350006, 'initializer_stddev': 0.053446042142941005}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:52,262] Trial 33 finished with value: 0.022457079961895943 and parameters: {'learning_rate': 0.003994935202988459, 'initializer_stddev': 0.06865674167669167}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:52,692] Trial 34 finished with value: 0.022847358137369156 and parameters: {'learning_rate': 0.009950880750268943, 'initializer_stddev': 0.04675119780067412}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:53,938] Trial 35 finished with value: 0.022937027737498283 and parameters: {'learning_rate': 0.0011262578614068663, 'initializer_stddev': 0.08436311787884894}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:54,412] Trial 36 finished with value: 0.022782374173402786 and parameters: {'learning_rate': 0.007069911710621079, 'initializer_stddev': 0.0993436081324075}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:55,054] Trial 37 finished with value: 0.023355023935437202 and parameters: {'learning_rate': 0.0033006122803400017, 'initializer_stddev': 0.01019950918531358}. Best is trial 13 with value: 0.02203303575515747.\n",
            "[I 2024-06-29 00:05:55,768] Trial 38 finished with value: 0.021424928680062294 and parameters: {'learning_rate': 0.004553365596562655, 'initializer_stddev': 0.07224583271256818}. Best is trial 38 with value: 0.021424928680062294.\n",
            "[I 2024-06-29 00:05:56,978] Trial 39 finished with value: 0.020620834082365036 and parameters: {'learning_rate': 0.0018100778877438188, 'initializer_stddev': 0.07305100121531033}. Best is trial 39 with value: 0.020620834082365036.\n",
            "[I 2024-06-29 00:05:57,889] Trial 40 finished with value: 0.02308841235935688 and parameters: {'learning_rate': 0.0016778890875903682, 'initializer_stddev': 0.07457603871711474}. Best is trial 39 with value: 0.020620834082365036.\n",
            "[I 2024-06-29 00:05:59,119] Trial 41 finished with value: 0.02291708253324032 and parameters: {'learning_rate': 0.0009030307196120857, 'initializer_stddev': 0.07962250069462586}. Best is trial 39 with value: 0.020620834082365036.\n",
            "[I 2024-06-29 00:05:59,834] Trial 42 finished with value: 0.022211162373423576 and parameters: {'learning_rate': 0.0025046248721678514, 'initializer_stddev': 0.06931189911121138}. Best is trial 39 with value: 0.020620834082365036.\n",
            "[I 2024-06-29 00:06:00,370] Trial 43 finished with value: 0.023458242416381836 and parameters: {'learning_rate': 0.004379191541724915, 'initializer_stddev': 0.08745769042461221}. Best is trial 39 with value: 0.020620834082365036.\n",
            "[I 2024-06-29 00:06:01,177] Trial 44 finished with value: 0.02431192435324192 and parameters: {'learning_rate': 0.0019212548165720837, 'initializer_stddev': 0.07126135389375571}. Best is trial 39 with value: 0.020620834082365036.\n",
            "[I 2024-06-29 00:06:01,857] Trial 45 finished with value: 0.02058885619044304 and parameters: {'learning_rate': 0.008203644074434826, 'initializer_stddev': 0.06377253043050543}. Best is trial 45 with value: 0.02058885619044304.\n",
            "[I 2024-06-29 00:06:02,285] Trial 46 finished with value: 0.02362702041864395 and parameters: {'learning_rate': 0.008131871784980779, 'initializer_stddev': 0.06310557600753057}. Best is trial 45 with value: 0.02058885619044304.\n",
            "[I 2024-06-29 00:06:02,932] Trial 47 finished with value: 0.02375049516558647 and parameters: {'learning_rate': 0.0033786100646879752, 'initializer_stddev': 0.07215134032400088}. Best is trial 45 with value: 0.02058885619044304.\n",
            "[I 2024-06-29 00:06:04,175] Trial 48 finished with value: 0.10008224099874496 and parameters: {'learning_rate': 0.00023812821141852558, 'initializer_stddev': 0.07915055739747179}. Best is trial 45 with value: 0.02058885619044304.\n",
            "[I 2024-06-29 00:06:04,671] Trial 49 finished with value: 0.023671278730034828 and parameters: {'learning_rate': 0.007914728394338233, 'initializer_stddev': 0.059550867212316776}. Best is trial 45 with value: 0.02058885619044304.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Number of finished trials: 50\n",
            "Best hyperparameters: {'learning_rate': 0.008203644074434826, 'initializer_stddev': 0.06377253043050543}\n",
            "Epoch 1/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 809us/step - loss: 0.0167 - val_loss: 0.1506\n",
            "Epoch 2/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 331us/step - loss: 0.0050 - val_loss: 0.0537\n",
            "Epoch 3/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 909us/step - loss: 0.0022 - val_loss: 0.0296\n",
            "Epoch 4/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 330us/step - loss: 0.0021 - val_loss: 0.0249\n",
            "Epoch 5/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 329us/step - loss: 0.0019 - val_loss: 0.0236\n",
            "Epoch 6/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 329us/step - loss: 0.0018 - val_loss: 0.0232\n",
            "Epoch 7/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 324us/step - loss: 0.0023 - val_loss: 0.0235\n",
            "Epoch 8/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 327us/step - loss: 0.0020 - val_loss: 0.0240\n",
            "Epoch 9/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 309us/step - loss: 0.0020 - val_loss: 0.0241\n",
            "Epoch 10/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 310us/step - loss: 0.0020 - val_loss: 0.0250\n",
            "Epoch 11/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322us/step - loss: 0.0023 - val_loss: 0.0244\n",
            "Epoch 12/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 321us/step - loss: 0.0022 - val_loss: 0.0255\n",
            "Epoch 13/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 332us/step - loss: 0.0019 - val_loss: 0.0259\n",
            "Epoch 14/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 323us/step - loss: 0.0016 - val_loss: 0.0260\n",
            "Epoch 15/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 320us/step - loss: 0.0018 - val_loss: 0.0270\n",
            "Epoch 16/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 327us/step - loss: 0.0018 - val_loss: 0.0258\n",
            "Epoch 17/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322us/step - loss: 0.0017 - val_loss: 0.0258\n",
            "Epoch 18/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 331us/step - loss: 0.0016 - val_loss: 0.0267\n",
            "Epoch 19/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 334us/step - loss: 0.0015 - val_loss: 0.0263\n",
            "Epoch 20/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 332us/step - loss: 0.0017 - val_loss: 0.0269\n",
            "Epoch 21/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 328us/step - loss: 0.0017 - val_loss: 0.0255\n",
            "Epoch 22/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 326us/step - loss: 0.0015 - val_loss: 0.0276\n",
            "Epoch 23/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 328us/step - loss: 0.0015 - val_loss: 0.0263\n",
            "Epoch 24/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 324us/step - loss: 0.0016 - val_loss: 0.0263\n",
            "Epoch 25/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 833us/step - loss: 0.0015 - val_loss: 0.0273\n",
            "Epoch 26/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 328us/step - loss: 0.0017 - val_loss: 0.0272\n",
            "Epoch 27/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 329us/step - loss: 0.0018 - val_loss: 0.0273\n",
            "Epoch 28/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335us/step - loss: 0.0016 - val_loss: 0.0260\n",
            "Epoch 29/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 322us/step - loss: 0.0015 - val_loss: 0.0258\n",
            "Epoch 30/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 333us/step - loss: 0.0016 - val_loss: 0.0257\n",
            "Epoch 31/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335us/step - loss: 0.0015 - val_loss: 0.0263\n",
            "Epoch 32/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 325us/step - loss: 0.0017 - val_loss: 0.0258\n",
            "Epoch 33/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 328us/step - loss: 0.0016 - val_loss: 0.0253\n",
            "Epoch 34/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335us/step - loss: 0.0016 - val_loss: 0.0263\n",
            "Epoch 35/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 330us/step - loss: 0.0015 - val_loss: 0.0266\n",
            "Epoch 36/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 341us/step - loss: 0.0015 - val_loss: 0.0252\n",
            "Epoch 37/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 343us/step - loss: 0.0015 - val_loss: 0.0259\n",
            "Epoch 38/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 332us/step - loss: 0.0015 - val_loss: 0.0264\n",
            "Epoch 39/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 333us/step - loss: 0.0016 - val_loss: 0.0265\n",
            "Epoch 40/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 342us/step - loss: 0.0014 - val_loss: 0.0271\n",
            "Epoch 41/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 328us/step - loss: 0.0014 - val_loss: 0.0259\n",
            "Epoch 42/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0019 - val_loss: 0.0274\n",
            "Epoch 43/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335us/step - loss: 0.0014 - val_loss: 0.0263\n",
            "Epoch 44/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 331us/step - loss: 0.0014 - val_loss: 0.0253\n",
            "Epoch 45/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0016 - val_loss: 0.0266\n",
            "Epoch 46/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 338us/step - loss: 0.0015 - val_loss: 0.0266\n",
            "Epoch 47/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0016 - val_loss: 0.0275\n",
            "Epoch 48/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335us/step - loss: 0.0014 - val_loss: 0.0257\n",
            "Epoch 49/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0014 - val_loss: 0.0255\n",
            "Epoch 50/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0015 - val_loss: 0.0266\n",
            "Epoch 51/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 332us/step - loss: 0.0014 - val_loss: 0.0257\n",
            "Epoch 52/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 340us/step - loss: 0.0019 - val_loss: 0.0266\n",
            "Epoch 53/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 844us/step - loss: 0.0013 - val_loss: 0.0277\n",
            "Epoch 54/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 348us/step - loss: 0.0016 - val_loss: 0.0265\n",
            "Epoch 55/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 343us/step - loss: 0.0016 - val_loss: 0.0267\n",
            "Epoch 56/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 342us/step - loss: 0.0015 - val_loss: 0.0264\n",
            "Epoch 57/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 336us/step - loss: 0.0016 - val_loss: 0.0264\n",
            "Epoch 58/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 336us/step - loss: 0.0017 - val_loss: 0.0276\n",
            "Epoch 59/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 340us/step - loss: 0.0015 - val_loss: 0.0270\n",
            "Epoch 60/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0014 - val_loss: 0.0254\n",
            "Epoch 61/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 346us/step - loss: 0.0013 - val_loss: 0.0280\n",
            "Epoch 62/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0014 - val_loss: 0.0262\n",
            "Epoch 63/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 342us/step - loss: 0.0014 - val_loss: 0.0273\n",
            "Epoch 64/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 351us/step - loss: 0.0014 - val_loss: 0.0271\n",
            "Epoch 65/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0016 - val_loss: 0.0261\n",
            "Epoch 66/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 336us/step - loss: 0.0016 - val_loss: 0.0276\n",
            "Epoch 67/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 334us/step - loss: 0.0016 - val_loss: 0.0263\n",
            "Epoch 68/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 344us/step - loss: 0.0015 - val_loss: 0.0268\n",
            "Epoch 69/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 340us/step - loss: 0.0015 - val_loss: 0.0272\n",
            "Epoch 70/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 335us/step - loss: 0.0016 - val_loss: 0.0271\n",
            "Epoch 71/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0014 - val_loss: 0.0272\n",
            "Epoch 72/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 333us/step - loss: 0.0014 - val_loss: 0.0254\n",
            "Epoch 73/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 842us/step - loss: 0.0015 - val_loss: 0.0300\n",
            "Epoch 74/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 333us/step - loss: 0.0017 - val_loss: 0.0279\n",
            "Epoch 75/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0015 - val_loss: 0.0268\n",
            "Epoch 76/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 341us/step - loss: 0.0015 - val_loss: 0.0270\n",
            "Epoch 77/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0015 - val_loss: 0.0255\n",
            "Epoch 78/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 345us/step - loss: 0.0013 - val_loss: 0.0249\n",
            "Epoch 79/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 340us/step - loss: 0.0014 - val_loss: 0.0292\n",
            "Epoch 80/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 341us/step - loss: 0.0016 - val_loss: 0.0246\n",
            "Epoch 81/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 344us/step - loss: 0.0014 - val_loss: 0.0267\n",
            "Epoch 82/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 340us/step - loss: 0.0015 - val_loss: 0.0248\n",
            "Epoch 83/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 337us/step - loss: 0.0016 - val_loss: 0.0302\n",
            "Epoch 84/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 338us/step - loss: 0.0015 - val_loss: 0.0254\n",
            "Epoch 85/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 336us/step - loss: 0.0015 - val_loss: 0.0252\n",
            "Epoch 86/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 341us/step - loss: 0.0015 - val_loss: 0.0257\n",
            "Epoch 87/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 340us/step - loss: 0.0014 - val_loss: 0.0280\n",
            "Epoch 88/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 343us/step - loss: 0.0014 - val_loss: 0.0263\n",
            "Epoch 89/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 348us/step - loss: 0.0015 - val_loss: 0.0255\n",
            "Epoch 90/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 864us/step - loss: 0.0016 - val_loss: 0.0266\n",
            "Epoch 91/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 348us/step - loss: 0.0016 - val_loss: 0.0250\n",
            "Epoch 92/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 342us/step - loss: 0.0014 - val_loss: 0.0271\n",
            "Epoch 93/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 340us/step - loss: 0.0016 - val_loss: 0.0291\n",
            "Epoch 94/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 344us/step - loss: 0.0014 - val_loss: 0.0252\n",
            "Epoch 95/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 348us/step - loss: 0.0015 - val_loss: 0.0264\n",
            "Epoch 96/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 340us/step - loss: 0.0015 - val_loss: 0.0270\n",
            "Epoch 97/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 341us/step - loss: 0.0015 - val_loss: 0.0280\n",
            "Epoch 98/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 347us/step - loss: 0.0015 - val_loss: 0.0259\n",
            "Epoch 99/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 352us/step - loss: 0.0014 - val_loss: 0.0284\n",
            "Epoch 100/100\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 346us/step - loss: 0.0013 - val_loss: 0.0258\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model saved to saved_models/Fuzzy_sklearn_version_tuned/Fuzzy_sklearn_version_tuned_model_20240629_000607.h5\n",
            "Scalers saved to saved_models/Fuzzy_sklearn_version_tuned/Fuzzy_sklearn_version_tuned_scalers_20240629_000607.pkl\n",
            "\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 649us/step\n",
            "Mean Squared Error (MSE) on Test Set: 227530331.4557092\n",
            "Root Mean Squared Error (RMSE) on Test Set: 15084.108573452699\n"
          ]
        }
      ],
      "source": [
        "import optuna\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from tqdm.auto import tqdm\n",
        "\n",
        "# Determine the optimal number of clusters (e.g., using domain knowledge, elbow method, etc.)\n",
        "n_clusters = 3  # This is a placeholder; adjust based on our analysis\n",
        "\n",
        "# Steps for cluster determination remain the same\n",
        "kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
        "kmeans.fit(X_train_scaled)\n",
        "cluster_centers = kmeans.cluster_centers_\n",
        "def create_objective(X_train_scaled, y_train_scaled, cluster_centers):\n",
        "    def objective(trial):\n",
        "        learning_rate = trial.suggest_float('learning_rate', 1e-4, 1e-2, log=True)\n",
        "        initializer_stddev = trial.suggest_float('initializer_stddev', 0.01, 0.1)\n",
        "        \n",
        "        model = create_fuzzy_model(\n",
        "            input_dim=X_train_scaled.shape[1],\n",
        "            cluster_centers=cluster_centers,\n",
        "            output_dim=1,\n",
        "            learning_rate=learning_rate,\n",
        "            initializer_stddev=initializer_stddev\n",
        "        )\n",
        "        \n",
        "        early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
        "        \n",
        "        history = model.fit(\n",
        "            X_train_scaled,\n",
        "            y_train_scaled,\n",
        "            validation_split=0.2,\n",
        "            epochs=50,\n",
        "            callbacks=[early_stopping],\n",
        "            verbose=0\n",
        "        )\n",
        "        \n",
        "        best_val_loss = min(history.history['val_loss'])\n",
        "        return best_val_loss\n",
        "    return objective\n",
        "\n",
        "objective_function = create_objective(X_train_scaled, y_train_scaled, cluster_centers)\n",
        "study = optuna.create_study(direction='minimize')\n",
        "\n",
        "# Wrap the study.optimize call with tqdm for a progress bar\n",
        "n_trials = 50\n",
        "with tqdm(total=n_trials, desc=\"Optimize\") as pbar:\n",
        "    def callback(study, trial):\n",
        "        # Update the progress bar after each trial\n",
        "        pbar.update(1)\n",
        "    study.optimize(objective_function, n_trials=n_trials, callbacks=[callback])\n",
        "\n",
        "print('Number of finished trials:', len(study.trials))\n",
        "# After optimization process\n",
        "best_hyperparams = study.best_trial.params\n",
        "print(f\"Best hyperparameters: {best_hyperparams}\")\n",
        "\n",
        "# Now, we can safely use `best_hyperparams` to retrain our model\n",
        "best_model = create_fuzzy_model(\n",
        "    input_dim=X_train_scaled.shape[1],\n",
        "    cluster_centers=cluster_centers,\n",
        "    output_dim=1,\n",
        "    learning_rate=best_hyperparams['learning_rate'],\n",
        "    initializer_stddev=best_hyperparams['initializer_stddev']\n",
        ")\n",
        "\n",
        "best_model.fit(X_train_scaled, y_train_scaled, epochs=100, batch_size=32, validation_split=0.2)\n",
        "\n",
        "# Save the model and scalers after training\n",
        "save_model_and_scalers(best_model, scaler_X, scaler_y, \"Fuzzy_sklearn_version_tuned\")\n",
        "\n",
        "y_pred_scaled = best_model.predict(X_test_scaled)\n",
        "y_pred = scaler_y.inverse_transform(y_pred_scaled).flatten()\n",
        "\n",
        "mse_test = mean_squared_error(y_test, y_pred)\n",
        "rmse_test = np.sqrt(mse_test)\n",
        "print(f\"Mean Squared Error (MSE) on Test Set: {mse_test}\")\n",
        "print(f\"Root Mean Squared Error (RMSE) on Test Set: {rmse_test}\")\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "761fdeda-5c00-4ee7-bf91-55c477f1e7d9",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                         Model          RMSE       MAPE\n",
            "0                    SimpleRNN  18514.550185        NaN\n",
            "1                         LSTM  10000.142824        NaN\n",
            "2                          GRU   6983.005377        NaN\n",
            "3              Sequential LSTM   2252.736655        NaN\n",
            "4              Timeseries LSTM  12636.922989        NaN\n",
            "5               LSTM_Optimized   8690.430055  38.834934\n",
            "6                  Fuzzy_basic  15572.177503  49.570949\n",
            "7                  Fuzzy_basic  15572.177503  49.570949\n",
            "8  Fuzzy_sklearn_version_tuned  15084.108573  59.950030\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Flatten y_test to make sure it's a 1D array\n",
        "y_test_original = y_test.values.flatten()\n",
        "\n",
        "# Ensure y_test_original and y_pred are correctly aligned\n",
        "y_test_original_aligned = y_test_original[:len(y_pred)]\n",
        "\n",
        "# Calculate MAPE\n",
        "mape_test = np.mean(np.abs((y_test_original_aligned - y_pred) / y_test_original_aligned)) * 100\n",
        "\n",
        "# Update the results DataFrame with the new metrics\n",
        "results_df = pd.concat([results_df, pd.DataFrame({'Model': ['Fuzzy_sklearn_version_tuned'], 'RMSE': [rmse_test], 'MAPE': [mape_test]})], ignore_index=True)\n",
        "\n",
        "# Save the updated DataFrame to CSV\n",
        "results_csv_path = 'tables/notebook09/results.csv'\n",
        "os.makedirs('tables/notebook09', exist_ok=True)\n",
        "results_df.to_csv(results_csv_path, index=False)\n",
        "\n",
        "# Save the updated DataFrame to a LaTeX table\n",
        "results_latex_path = 'tables/notebook09/results.tex'\n",
        "with open(results_latex_path, 'w') as f:\n",
        "    f.write(results_df.to_latex(index=False))\n",
        "\n",
        "# Confirm the updated DataFrame\n",
        "print(results_df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "50d71467-6cd5-4c86-a9ca-2a93c1e9bb76",
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Available columns in X_test after adding datetime: Index(['date', 'open', 'volume', 'sma_30', 'rsi', 'macd', 'dia_close',\n",
            "       'dia_volume', 'gld_close', 'gld_volume', 'spy_close', 'spy_volume',\n",
            "       'federal_funds_rate_daily', 'treasury_yield_daily', 'cpi_monthly',\n",
            "       'durables_monthly', 'nonfarm_payroll_monthly',\n",
            "       'real_gdp_per_capita_quarterly', 'real_gdp_quarterly',\n",
            "       'retail_sales_monthly', 'unemployment_monthly',\n",
            "       'central_bank_policy_rate_prcnt', 'domestic_credit_gdp',\n",
            "       'foreign_direct_investment_value', 'gdp_growth_annual_prcnt',\n",
            "       'inflation_rate_value',\n",
            "       'individuals_using_the_internet_prcnt_of_population',\n",
            "       'mobile_cellular_subscriptions_per_100_people',\n",
            "       'personal_remittances_received_prcnt_of_gdp',\n",
            "       'stock_market_index_value', 'tariffs_value',\n",
            "       'total_public_debt_gdp_value', 'trade_balance_value',\n",
            "       'trade_in_services_value', 'unemployment_rate_value', 'value',\n",
            "       'classification_numerical', 'classification', 'datetime'],\n",
            "      dtype='object')\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Paths to the prepped data files\n",
        "base_path = './daily_data/'  # Adjusted base path to where our files are now\n",
        "X_test_path = base_path + 'X_test.csv'\n",
        "\n",
        "# Re-read the X_test data from the file\n",
        "X_test = pd.read_csv(X_test_path)\n",
        "\n",
        "# Ensure the datetime column is present\n",
        "if 'datetime' not in X_test.columns:\n",
        "    X_test['datetime'] = pd.to_datetime(X_test.index)\n",
        "\n",
        "print(\"Available columns in X_test after adding datetime:\", X_test.columns)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "b801703d-06d4-4c86-81a4-40d6d535de9f",
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "y_test_original = y_test.values.flatten()[:len(y_pred)]  # Adjust length if necessary\n",
        "# Assuming y_test_original and y_pred are correctly aligned with these dates\n",
        "test_dates_aligned = X_test['datetime'].values[-len(y_pred):]\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(test_dates_aligned, y_test_original, label='Actual', marker='.', linestyle='-', linewidth=1)\n",
        "plt.plot(test_dates_aligned, y_pred, label='Predicted', alpha=0.7, marker='.', linestyle='--', linewidth=1)\n",
        "plt.title('Actual vs Predicted')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Value')\n",
        "plt.legend()\n",
        "\n",
        "# Remove the x-axis ticks and labels\n",
        "plt.xticks([])\n",
        "\n",
        "plt.tight_layout()\n",
        "\n",
        "# Save the plot to the specified directory\n",
        "output_dir = 'figures/notebook09'\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "plot_path = os.path.join(output_dir, 'actual_vs_predicted09.png')\n",
        "plt.savefig(plot_path, bbox_inches='tight')\n",
        "\n",
        "plt.show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python (.venv)",
      "language": "python",
      "name": ".venv"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.6"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
